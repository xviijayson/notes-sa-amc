import React, { useState } from 'react';
import { View, Text, StyleSheet, ScrollView, Image, TouchableOpacity, TextInput, Linking, Alert } from 'react-native';
import { WebView } from 'react-native-webview';

// Your existing mood data and moodTracks (unchanged)...

const moods = [/* ... as before ... */];

const moodTracks = { /* ... as before ... */ };

export default function App() {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isSignup, setIsSignup] = useState(false);
  const [email, setEmail] = useState('');
  const [password, setPassword] = useState('');
  const [selectedMood, setSelectedMood] = useState(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [chatBotMessage, setChatBotMessage] = useState('');

  const handleSearch = () => {
    return moods.filter((mood) =>
      mood.title.toLowerCase().includes(searchTerm.toLowerCase())
    );
  };

  const handleMoodSelect = (moodTitle) => {
    setSelectedMood(moodTitle);
    setChatBotMessage(`Hey! You're feeling ${moodTitle.toLowerCase()}! Here's some great tunes for that mood! ðŸŽ¶`);
  };

  const renderTracks = () => {
    const currentTracks = moodTracks[selectedMood.replace(' ', '_')] || [];

    return (
      <ScrollView style={styles.trackList}>
        <Text style={styles.subtitle}>VIBES FOR A {selectedMood} MOOD</Text>
        <Text style={styles.chatbot}>{chatBotMessage}</Text>
        {currentTracks.map((track, index) => (
          <View key={index} style={styles.trackContainer}>
            <WebView source={{ uri: track.embed }} style={styles.webview} javaScriptEnabled />
          </View>
        ))}
        <TouchableOpacity style={styles.button} onPress={() => setSelectedMood(null)}>
          <Text style={styles.buttonText}>HOME</Text>
        </TouchableOpacity>
      </ScrollView>
    );
  };

  const handleAuth = () => {
    if (!email || !password) {
      Alert.alert('Error', 'Please fill in all fields');
      return;
    }

    if (password.length < 6) {
      Alert.alert('Weak Password', 'Password must be at least 6 characters long');
      return;
    }

    setIsAuthenticated(true);
    setEmail('');
    setPassword('');
  };

  const renderAuthScreen = () => (
    <View style={styles.authContainer}>
      <Text style={styles.header}>{isSignup ? 'SIGN UP' : 'LOGIN'}</Text>
      <TextInput
        style={styles.input}
        placeholder="Email"
        placeholderTextColor="#999"
        onChangeText={setEmail}
        value={email}
        keyboardType="email-address"
      />
      <TextInput
        style={styles.input}
        placeholder="Password"
        placeholderTextColor="#999"
        secureTextEntry
        onChangeText={setPassword}
        value={password}
      />
      <TouchableOpacity style={styles.button} onPress={handleAuth}>
        <Text style={styles.buttonText}>{isSignup ? 'Sign Up' : 'Login'}</Text>
      </TouchableOpacity>
      <TouchableOpacity onPress={() => setIsSignup(!isSignup)}>
        <Text style={styles.switchText}>
          {isSignup ? 'Already have an account? Login' : "Don't have an account? Sign up"}
        </Text>
      </TouchableOpacity>
    </View>
  );

  if (!isAuthenticated) return renderAuthScreen();

  return (
    <View style={styles.container}>
      {!selectedMood ? (
        <ScrollView>
          <Text style={styles.header}>GROOVE ðŸŽ§ TUNES</Text>
          <View style={styles.socialLinks}>
            <TouchableOpacity onPress={() => Linking.openURL('https://www.facebook.com/nosyaj.otnicaj.9')}><Text style={styles.link}>Facebook</Text></TouchableOpacity>
            <TouchableOpacity onPress={() => Linking.openURL('https://www.instagram.com/xviijayson/')}><Text style={styles.link}>Instagram</Text></TouchableOpacity>
          </View>
          <TextInput
            style={styles.searchInput}
            placeholder="Search mood..."
            placeholderTextColor="#999"
            onChangeText={setSearchTerm}
            value={searchTerm}
          />
          <Text style={styles.subtitle}>FEATURED MOODS</Text>
          <View style={styles.moodGrid}>
            {handleSearch().map((mood, index) => (
              <TouchableOpacity key={index} onPress={() => handleMoodSelect(mood.title)} style={styles.moodBox}>
                <Image source={{ uri: mood.image }} style={styles.moodImage} />
                <Text style={styles.moodLabel}>{mood.title}</Text>
              </TouchableOpacity>
            ))}
          </View>
        </ScrollView>
      ) : renderTracks()}
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    backgroundColor: '#0D0D0D',
    paddingTop: 50,
  },
  authContainer: {
    flex: 1,
    backgroundColor: '#0D0D0D',
    justifyContent: 'center',
    paddingHorizontal: 30,
  },
  input: {
    backgroundColor: '#1A1A1A',
    color: '#fff',
    padding: 10,
    borderRadius: 8,
    marginBottom: 15,
  },
  switchText: {
    color: '#FF66CC',
    textAlign: 'center',
    marginTop: 10,
    textDecorationLine: 'underline',
  },
  header: {
    fontSize: 32,
    color: '#FF66CC',
    textAlign: 'center',
    fontWeight: 'bold',
    marginBottom: 20,
  },
  socialLinks: {
    flexDirection: 'row',
    justifyContent: 'center',
    marginBottom: 10,
    gap: 10,
  },
  link: {
    color: '#00BFFF',
    marginHorizontal: 10,
    textDecorationLine: 'underline',
  },
  searchInput: {
    backgroundColor: '#1A1A1A',
    color: '#fff',
    padding: 10,
    borderRadius: 8,
    marginHorizontal: 20,
    marginBottom: 15,
  },
  subtitle: {
    fontSize: 18,
    color: '#fff',
    textAlign: 'center',
    marginBottom: 20,
  },
  moodGrid: {
    flexDirection: 'row',
    flexWrap: 'wrap',
    justifyContent: 'center',
    paddingHorizontal: 10,
  },
  moodBox: {
    width: 140,
    margin: 10,
    alignItems: 'center',
    backgroundColor: '#1A1A1A',
    borderRadius: 10,
    padding: 5,
    shadowColor: '#FF66CC',
    shadowOpacity: 0.3,
    shadowRadius: 10,
  },
  moodImage: {
    width: 120,
    height: 80,
    borderRadius: 8,
  },
  moodLabel: {
    color: '#fff',
    fontWeight: 'bold',
    marginTop: 5,
  },
  trackList: {
    paddingHorizontal: 10,
  },
  trackContainer: {
    height: 80,
    marginBottom: 20,
    borderRadius: 12,
    overflow: 'hidden',
    backgroundColor: '#1A1A1A',
    shadowColor: '#FF66CC',
    shadowOpacity: 0.3,
    shadowRadius: 10,
  },
  webview: {
    height: 80,
  },
  button: {
    backgroundColor: '#FF66CC',
    padding: 10,
    borderRadius: 8,
    marginTop: 10,
    alignItems: 'center',
  },
  buttonText: {
    color: '#fff',
    fontWeight: 'bold',
  },
  chatbot: {
    color: '#FF66CC',
    fontStyle: 'italic',
    fontSize: 14,
    textAlign: 'center',
    marginBottom: 20,
  },
});
